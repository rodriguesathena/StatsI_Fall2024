getwd()
setwd("D:/StatsI_Fall2024")
df <- read.csv("fictional_data.csv")
getwd()
df <- read_csv("fictional_data.csv")
df <- read.csv("datasets/fictional_data.csv")
View(df)
str(df) # Present structure of R object
?str
head(df)
tail(df, 2)
hist(df$income) # Distribution
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length((df$income))) # Variability, standard **error**
df$income
length((df$income))
sqrt(length((df$income)))
sqrt(19)
sd(df$income)/sqrt(length((df$income)))
hist(df$edu) # Distribution
mean(df$edu) # Central tendency, mean
var(df$edu) # Variability, variance
sd(df$edu) # Variability, standard deviation
sd(df$edu)/sqrt(length((df$edu))) # Variability, standard **error**
summary(df)
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error again? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Upper bound
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Print
lower_95
mean(df$income)
upper_95
# Print
lower_95
mean(df$income)
upper_95
# How to calculate 99% confidence intervals?
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
###Sampling###
s <- sample(df$income, size = 2000, replace = TRUE, prob = df$edu)
hist(s, breaks = 100, xlab = "Income", ylab = "Frequency", main = "Income in one sample (N=2000)")
# Mean of the population
print(weighted.mean(df$income, w = df$edu), digits = 6)
## 2244.33
# Mean of the one sample
print(mean(s), digits = 6)
## 2242.42
# Mean of the one sample
print(mean(s), digits = 6)
## 2242.42
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error again? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
### 95% Confidence level ###
# Definition: Point estimate +/- Margin of error,
# where margin of error is a multiple of the standard error
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
# How to find the multiple?
# Looking at the normal distribution, we see that
# 95% of observations lie within +/-1.96 (approximately 2)
# standard errors of point estimate
# Lower bound
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Upper bound
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Print
lower_95
mean(df$income)
upper_95
# How to calculate 99% confidence intervals?
x <- rnorm(200, mean = 0, sd = 1)
mean(x)
## -0.07337356
sd(x)
## 0.9675932
x <- rnorm(1000000, mean = 0, sd = 1)
mean(x)
## -0.000101218
sd(x)
## 1.000413
#For the standard normal distribution, find the area to the left of x = 1.96
pnorm(q = 1.96)
## 0.9750021
pnorm(q = -1.96)
## 0.0249979
qnorm(0.025) ## -1.959964
qnorm(0.975) ## 1.959964
qnorm(0.005) ## -2.575829
qnorm(0.995) ## 2.575829
qnorm(0.025) ## -1.959964
qnorm(0.975) ## 1.959964
qnorm(0.005) ## -2.575829
qnorm(0.995) ## 2.575829
n <- length(df$income)
qt(0.025, n-1, lower.tail = T)
## -2.100922
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
# Is there a relationship between education and income?
### Scatter plot ###
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="output/scatter_plot.png")
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Capital", "Non capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
png(file="output/scatter_plot.png")
png(file="week1/scatter_plot.png")
png(file="tutorials/Wednesday/week1/scatter_plot.png")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Capital", "Non capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
# Applied Statistical Analysis I
# Tutorial 1: Introduction & stats review
# Get working directory
getwd()
# Set working directory
setwd("D:/TCD_courses/2024_2025Autumn/Applied StatsQuant Methods I_Fall 2024/tutorials/01")
mean(y)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
#####################
# Problem 1
#####################
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
mean(y)
ymean <- mean(y) #point estimate
ystandarderror <- sd(y)/sqrt(length(y)) #standard error
ystandarderror
ymean
# What do we need?
mean(df$income) # Point estimate
# Applied Statistical Analysis I
# Tutorial 1: Introduction & stats review
# Get working directory
getwd()
# Set working directory
# setwd("D:/TCD_courses/2024_2025Autumn/Applied StatsQuant Methods I_Fall 2024/tutorials/01")
getwd()
### Data collection ----------
# Load data
df <- read.csv("datasets/fictional_data.csv")
# First step, look at data
View(df)
str(df) # Present structure of R object
?str
head(df)
tail(df, 2)
### Descriptive analysis ----------
### Income ###
hist(df$income) # Distribution
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length((df$income))) # Variability, standard **error**
# Step by step
df$income
length((df$income))
sqrt(length((df$income)))
sqrt(19)
sd(df$income)/sqrt(length((df$income)))
### Education ###
hist(df$edu) # Distribution
mean(df$edu) # Central tendency, mean
var(df$edu) # Variability, variance
sd(df$edu) # Variability, standard deviation
sd(df$edu)/sqrt(length((df$edu))) # Variability, standard **error**
# Get summary statistics for entire dataset
summary(df)
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error again? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
### 95% Confidence level ###
# Definition: Point estimate +/- Margin of error,
# where margin of error is a multiple of the standard error
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
# How to find the multiple?
# Looking at the normal distribution, we see that
# 95% of observations lie within +/-1.96 (approximately 2)
# standard errors of point estimate
# Lower bound
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Upper bound
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Print
lower_95
mean(df$income)
upper_95
# How to calculate 99% confidence intervals?
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
###Sampling###
s <- sample(df$income, size = 2000, replace = TRUE, prob = df$edu)
hist(s, breaks = 100, xlab = "Income", ylab = "Frequency", main = "Income in one sample (N=2000)")
# Mean of the population
print(weighted.mean(df$income, w = df$edu), digits = 6)
## 2244.33
# Mean of the one sample
print(mean(s), digits = 6)
## 2242.42
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error again? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
### 95% Confidence level ###
# Definition: Point estimate +/- Margin of error,
# where margin of error is a multiple of the standard error
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
# How to find the multiple?
# Looking at the normal distribution, we see that
# 95% of observations lie within +/-1.96 (approximately 2)
# standard errors of point estimate
# Lower bound
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Upper bound
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
# Print
lower_95
mean(df$income)
upper_95
# How to calculate 99% confidence intervals?
x <- rnorm(200, mean = 0, sd = 1)
mean(x)
## -0.07337356
sd(x)
## 0.9675932
x <- rnorm(1000000, mean = 0, sd = 1)
mean(x)
## -0.000101218
sd(x)
## 1.000413
#For the standard normal distribution, find the area to the left of x = 1.96
pnorm(q = 1.96)
## 0.9750021
pnorm(q = -1.96)
## 0.0249979
qnorm(0.025) ## -1.959964
qnorm(0.975) ## 1.959964
qnorm(0.005) ## -2.575829
qnorm(0.995) ## 2.575829
n <- length(df$income)
qt(0.025, n-1, lower.tail = T)
## -2.100922
### Histogram ###
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
# Is there a relationship between education and income?
### Scatter plot ###
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Improve visualization and save
png(file="tutorials/Wednesday/week1/scatter_plot.png")
plot(df$edu,
df$income,
col=df$cap+1,
ylab="Monthly net income (in Euro)",
xlab="University level education (in years)",
main="The Relationship between Education and Income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Capital", "Non capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("ggplot2", "stargazer"),  pkgTest)
# set working directory to current parent folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
#####################
# Problem 2
#####################
# read in expenditure data
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/expenditure.txt", header=T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
mean(df$income) # Point estimate
# Applied Statistical Analysis I
# Tutorial 1: Introduction & stats review
# Get working directory
getwd()
# Set working directory
# setwd("D:/TCD_courses/2024_2025Autumn/Applied StatsQuant Methods I_Fall 2024/tutorials/01")
getwd()
### Data collection ----------
# Load data
df <- read.csv("datasets/fictional_data.csv")
# First step, look at data
View(df)
str(df) # Present structure of R object
?str
head(df)
tail(df, 2)
### Descriptive analysis ----------
### Income ###
hist(df$income) # Distribution
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
sd(df$income) # Variability, standard deviation
sd(df$income)/sqrt(length((df$income))) # Variability, standard **error**
# Step by step
df$income
length((df$income))
sqrt(length((df$income)))
sqrt(19)
sd(df$income)/sqrt(length((df$income)))
### Education ###
hist(df$edu) # Distribution
mean(df$edu) # Central tendency, mean
var(df$edu) # Variability, variance
sd(df$edu) # Variability, standard deviation
sd(df$edu)/sqrt(length((df$edu))) # Variability, standard **error**
# Get summary statistics for entire dataset
summary(df)
# Which kind of inferences can we make with regards to the population,
# based on the sample data?
mean(df$income) # Sample mean is estimate for population mean
sd(df$income)/sqrt(length((df$income)))
# Standard **error** (Sample standard deviation adjusted by sample size)
# is estimate for standard deviation of the sampling distribution
# Why do we need standard error again? --> to calculate measures of
# uncertainty for our point estimate (e.g., confidence intervals, and p-values)
### 95% Confidence level ###
# Definition: Point estimate +/- Margin of error,
# where margin of error is a multiple of the standard error
# What do we need?
mean(df$income) # Point estimate
sd(df$income)/sqrt(length((df$income))) # Standard error
upper_95
upper_95 = (mean(df$income))+(1.96)*(sd(df$income)/sqrt(length((df$income))))
upper_95
lower_95 = (mean(df$income))-(1.96)*(sd(df$income)/sqrt(length((df$income))))
lower_95
View(df)
lower_90
ymean <- mean(y) #mean 98.44
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# 90% Confidence Interval: point estimate +/- margin of error
#point estimate
ymean <- mean(y) #mean 98.44
#margin of error
ystderr <- sd(y)/sqrt(length(y)) #standard error 2.618575
confidence <- qnorm(0.95) # +/- 1.64
#lower bound
upper_90 <- (ymean + (confidence)*ystderr)  # 102.7345
lower_90 <- (ymean - (confidence)*ystderr)  # 94.14554
# overall
lower_90
ymean
upper_90
df <- read.csv("fictional_data.csv")
setwd("D:/Documents/GitHub/StatsI_Fall2024")
setwd("C:/Documents/GitHub/StatsI_Fall2024")
