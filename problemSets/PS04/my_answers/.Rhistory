stop("Both inputs must have a length greater than 1")
}
#check for NAs
if (any(is.na(x)) || any(is.na(y))){
stop("Both inputs should have no missing values (NA)")
}
#check for same vector values (variance = 0)
if (var(x) == 0 || var(y) == 0){
stop("One or more inputs has same vector values resulting in zero variance")
}
# Calculate the means of the two samples
mean_x <- mean(x)
mean_y <- mean(y)
# Calculate the variances of the two samples
var_x <- var(x)
var_y <- var(y)
# Calculate the sample sizes
n_x <- length(x)
n_y <- length(y)
# Calculate the sample standard errors
se_x <- sqrt(var_x/n_x)
se_y <- sqrt(var_y/n_y)
se <- sqrt(se_x^2 + se_y^2)
# Calculate the t-statistic
t_stat <- (mean_x - mean_y) / se
# Calculate the degrees of freedom
df <- se^4/(se_x^4/(n_x - 1) + se_y^4/(n_y - 1))
# Calculate the p-value
p_val <- 2 * (1 - pt(abs(t_stat), df))
# Create a result list
res <- list(
t_statistic = t_stat,
degrees_of_freedom = df,
p_value = p_val
)
return(res)
}
# What are your expectations about the input?
print("Based off the function and the output errors from above, inputs for the t_test function are expected to be varied
numeric vectors with lengths greater than 1 and no NA values (as there is no way of handling them in the function t_test).")
var(x4)
x4 <- c(3.8,3.8,3.8,3.8)
y4 <- c(2.7, 3.5, 1.6, 7.9)
var(x4)
var(y4)
y4 <- c(3.8,3.8,3.8,3.8)
var(y4)
t_test_handling <- function(x, y) {
# Input Checks
#check for non-numeric
if (!is.numeric(x) || !is.numeric(y)) {
stop("Both inputs must be numeric vectors")
}
#check lengths of x and y
if (length(x) < 2 || length(y) < 2) {
stop("Both inputs must have a length greater than 1")
}
#check for NAs
if (any(is.na(x)) || any(is.na(y))){
stop("Both inputs should have no missing values (NA)")
}
#check for same vector values (variance = 0)
if (var(x) == 0 && var(y) == 0){
stop("One or more inputs has same vector values resulting in zero variance")
}
# Calculate the means of the two samples
mean_x <- mean(x)
mean_y <- mean(y)
# Calculate the variances of the two samples
var_x <- var(x)
var_y <- var(y)
# Calculate the sample sizes
n_x <- length(x)
n_y <- length(y)
# Calculate the sample standard errors
se_x <- sqrt(var_x/n_x)
se_y <- sqrt(var_y/n_y)
se <- sqrt(se_x^2 + se_y^2)
# Calculate the t-statistic
t_stat <- (mean_x - mean_y) / se
# Calculate the degrees of freedom
df <- se^4/(se_x^4/(n_x - 1) + se_y^4/(n_y - 1))
# Calculate the p-value
p_val <- 2 * (1 - pt(abs(t_stat), df))
# Create a result list
res <- list(
t_statistic = t_stat,
degrees_of_freedom = df,
p_value = p_val
)
return(res)
}
y4 <- c(3.8,3.8,3.8,3.8)
x4 <- c(2.7, 3.5, 1.6, 7.9)
var(y4)
novariance <- t_test_handling(x4, y4)
print("Check 4", novariance)
y4 <- c(3.8,3.8,3.8,3.8)
x4 <- c(2.7, 2.7,2.7,2.7)
var(y4)
novariance <- t_test_handling(x4, y4)
total <- sum(language_count$count)
install.packages("tidyr")
install.packages("dplyr")
library("tidyr")
library("dplyr")
responses <- read.csv("kaggle_survey_2022_responses.csv")
responses <- read.csv(".../CompProgram_Fall2024/Assignments/Assignment 2/kaggle_survey_2022_responses.csv")
responses <- read.csv("CompProgram_Fall2024/Assignments/Assignment 2/kaggle_survey_2022_responses.csv")
colnames(responses)
question12 <- responses %>% select(starts_with("Q12")) #subsetting only Q12 questions
question12 <- question12[-1, ] #remove the first row showing the question
pivot12 <- question12 %>%
pivot_longer(cols = everything(),
names_to = "program",
values_to = "used") %>%
filter(!is.na(used) & used != "") #dropping rows with no responses (blanks)
language_count <- pivot12 %>%
group_by(used) %>%
summarise(count = n())
View(pivot12)
View(question12)
View(responses)
total <- sum(language_count$count)
View(language_count)
colnames(language_count) <- c("language", "count", "percentage")
high_to_low_languages <- language_count %>% arrange(desc(percentage))
colnames(language_count) <- c("language", "count", "percentage")
language_count$percentage <- (language_count$count/total)*100
colnames(language_count) <- c("language", "count", "percentage")
high_to_low_languages <- language_count %>% arrange(desc(percentage))
View(high_to_low_languages)
library("tidyr")
library("dplyr")
responses <- read.csv("CompProgram_Fall2024/Assignments/Assignment 2/kaggle_survey_2022_responses.csv")
#colnames(responses)
question12 <- responses %>% select(starts_with("Q12")) #subsetting only Q12 questions
question12 <- question12[-1, ] #remove the first row showing the question
#colnames(question12)
pivot12 <- question12 %>%
pivot_longer(cols = everything(),
names_to = "program",
values_to = "used") %>%
filter(!is.na(used) & used != "") #dropping rows with no responses (blanks)
language_count <- pivot12 %>%
group_by(used) %>%
summarise(count = n())
total <- sum(language_count$count)
language_count$percentage <- (language_count$count/total)*100
#colnames(language_count) <- c("language", "count", "percentage")
high_to_low_languages <- language_count %>% arrange(desc(percentage))
View(language_count)
install.packages("tidyr")
install.packages("dplyr")
library("tidyr")
library("dplyr")
responses <- read.csv("CompProgram_Fall2024/Assignments/Assignment 2/kaggle_survey_2022_responses.csv")
#colnames(responses)
question12 <- responses %>% select(starts_with("Q12")) #subsetting only Q12 questions
question12 <- question12[-1, ] #remove the first row showing the question
#colnames(question12)
pivot12 <- question12 %>%
pivot_longer(cols = everything(),
names_to = "program",
values_to = "used") %>%
filter(!is.na(used) & used != "") #dropping rows with no responses (blanks)
language_count <- pivot12 %>%
group_by(used) %>%
summarise(count = n())
total <- sum(language_count$count)
language_count$percentage <- (language_count$count/total)*100
high_to_low_languages <- language_count %>% arrange(desc(percentage))
View(high_to_low_languages)
incumbent <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
question1_regression <- lm(voteshare ~ difflog, data = incumbent)
print(question1_regression)
summary(question1_regression)
question1_scatter <- plot(incumbent$difflog, incumbent$voteshare,
xlab = "difflog",
ylab = "voteshare",
main = "scatter plot between difflog and voteshare") +
abline(question1_regression, col="red")
question1_scatter
question2_regression <- lm(presvote ~ difflog, data = incumbent)
print(question2_regression)
summary(question2_regression)
question2_scatter <- plot(incumbent$difflog, incumbent$presvote,
xlab = "difflog",
ylab = "presvote",
main = "scatter plot between difflog and presvote") +
abline(question2_regression, col="red")
question2_residuals <- question2_regression$residuals
question3_regression <- lm(voteshare ~ presvote, data = incumbent)
print(question3_regression)
summary(question3_regression)
question3_scatter <- plot(incumbent$presvote, incumbent$voteshare,
xlab = "presvote",
ylab = "voteshare",
main = "scatter plot between presvote and voteshare") +
abline(question3_regression, col="red")
question3_residuals <- question3_regression$residuals
question4_regression <- lm(question1_residuals ~ question2_residuals, data = incumbent)
question1_residuals <- question1_regression$residuals
question4_regression <- lm(question1_residuals ~ question2_residuals, data = incumbent)
print(question4_regression)
summary(question4_regression)
question4_scatter <- plot(question2_residuals, question1_residuals,
xlab = "question 2 residuals",
ylab = "question 1 residuals",
main = "residuals of question 1 and question 2") +
abline(question4_regression, col="red")
question5_regression <- lm(incumbent$voteshare ~ incumbent$difflog + incumbent$presvote)
print(question5_regression)
summary(question5_regression)
intercept <- round(question1_regression$coefficients[1],3)
slope <- round(question1_regression$coefficients[2],3)
cat(intercept, "+", slope, "* difflog")
question2_residuals <- question2_regression$residuals
# part 4 prediction equation y-hat = beta0 + beta1(x)
intercept2 <- round(question2_regression$coefficients[1],3)
slope2 <- round(question2_regression$coefficients[2],3)
cat(intercept2, "+", slope2, "* difflog")
intercept <- round(question1_regression$coefficients[1],3)
slope <- round(question1_regression$coefficients[2],3)
cat(intercept, "+", slope, "* difflog")
intercept3 <- round(question3_regression$coefficients[1],3)
slope3 <- round(question3_regression$coefficients[2],3)
cat(intercept3, "+", slope3, "* voteshare")
# part 3 prediction equation y-hat = beta0 + beta1(x)
intercept4 <- round(question4_regression$coefficients[1],3)
slope4 <- round(question4_regression$coefficients[2],3)
cat(intercept4, "+", slope4, "* question2_residuals")
intercept5 <- round(question5_regression$coefficients[1],3)
slope5difflog <- round(question5_regression$coefficients[2],3)
slope5presvote <- round(question5_regression$coefficients[3],3)
cat(intercept5, "+", slope5difflog, "* difflog", "+", slope5presvote, "* presvote")
# part 3 prediction equation y-hat = beta0 + beta1(x)
intercept4 <- round(question4_regression$coefficients[1],3)
slope4 <- round(question4_regression$coefficients[2],3)
cat(intercept4, "+", slope4, "* question2_residuals")
# part 1 regression
question4_regression <- lm(question1_residuals ~ question2_residuals, data = incumbent)
print(question4_regression)
summary(question4_regression)
# set wd
setwd("C:/Users/athen/Documents/GitHub/StatsI_Fall2024/problemSets/PS04/my_answers")
getwd()
install.packages(car)
library(car)
install.packages("car")
library(car)
data(Prestige)
help(Prestige)
professional <- c()
Prestige$professional <- c()
View(Prestige)
Prestige$professional <- ifelse(Prestige$type == "prof", 1, 0)
View(Prestige)
parta_regression <- lm(prestige ~ income+professional)
occupations <- Prestige #change name for clarity
#part a professional = 1, else = 0
occupations$professional <- ifelse(occupations$type == "prof", 1, 0)
#part b
parta_regression <- lm(occupation$prestige ~ occupation$income + occupation$professional)
parta_regression <- lm(occupations$prestige ~ occupations$income + occupations$professional)
View(occupations)
summary(parta_regression)
#part a professional = 1, else = 0
occupations$professional <- as.factor(ifelse(occupations$type == "prof", 1, 0))
#part b
parta_regression <- lm(occupations$prestige ~ occupations$income + occupations$professional)
summary(parta_regression)
data(Prestige) #prestige of Canadian occupations
help(Prestige)
occupations <- Prestige #change name for clarity
#part a professional = 1, else = 0
occupations$professional <- as.factor(ifelse(occupations$type == "prof", 1, 0))
#part b use * because continuous X dummy
parta_regression <- lm(occupations$prestige ~ occupations$income*occupations$professional)
summary(parta_regression)
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional",
"+", both_intercept, "*income*professional")
summary(parta_regression)
#part c E[Y] = slope+(intercept)*income+(intercept)*professional-(intercept)*income*professional
slope_intercept <- parta_regression$coefficients[0]
income_intercept <- parta_regression$coefficients[1]
professional_intercept <- parta_regression$coefficients[2]
both_intercept <- parta_regression$coefficients[3]
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional",
"+", both_intercept, "*income*professional")
slope_intercept <- round(parta_regression$coefficients[0],3)
income_intercept <- round(parta_regression$coefficients[1],3)
professional_intercept <- round(parta_regression$coefficients[2],3)
both_intercept <- round(parta_regression$coefficients[3],3)
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional",
"+", both_intercept, "*income*professional")
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", both_intercept, "*income*professional")
professional_intercept
professional_intercept <- round(parta_regression$coefficients[2],3)
professional_intercept
income_intercept
professional_intercept
both_intercept <- round(parta_regression$coefficients[3],3)
both_intercept
parta_regression <- lm(occupations$prestige ~ occupations$income*occupations$professional)
View(parta_regression)
slope_intercept <- round(parta_regression$coefficients[0],3)
slope_intercept
slope_intercept <- round(parta_regression$coefficients[1],3)
income_intercept <- round(parta_regression$coefficients[2],3)
professional_intercept <- round(parta_regression$coefficients[3],3)
both_intercept <- round(parta_regression$coefficients[4],3)
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", both_intercept, "*income*professional")
#part d
expected <- slope + income_int * income + prof_int * professional + both_int * income * professional
slope <- 21.142
income_int <- 0.003
income <- 1000
prof_int <- 37.781
professional <- 1
both_int <- -0.002
expected <- slope + income_int * income + prof_int * professional + both_int * income * professional
print(expected)
#part g
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
both_int <- -0.002
partg_expected <- slope + income_int * income + prof_int * professional + both_int * income * professional
print(partg_expected)
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
print(professional_partg, notprofessional_partg, (professional_partg - notprofessional_partg))
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
print(professional_partg, notprofessional_partg, (professional_partg-notprofessional_partg))
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
print(professional_partg, notprofessional_partg)
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
print(professional_partg, notprofessional_partg)
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
notprofessional_partg
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
cat(professional_partg, notprofessional_partg)
change_in_occupation <- professional_partg - notprofessional_partg
#part g
slope <- 21.142
income_int <- 0.003
income <- 6000
prof_int <- 37.781
professional <- 1
notprofessional <- 0
both_int <- -0.002
professional_partg <- slope + income_int * income + prof_int * professional + both_int * income * professional
notprofessional_partg <- slope + income_int * income + prof_int * notprofessional + both_int * income * notprofessional
cat(professional_partg, notprofessional_partg)
change_in_occupation <- professional_partg - notprofessional_partg
print(change_in_occupation)
cat(slope_intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", both_intercept, "*income*professional")
print(partf_expected)
slope <- 21.142
income_coef <- 0.003
income <- 1000
prof_coef <- 37.781
professional <- 1
both_coef <- -0.002
partf_expected <- slope + income_coef * income + prof_coef * professional + both_coef * income * professional
print(partf_expected)
# set wd
setwd("C:/Users/athen/Documents/GitHub/StatsI_Fall2024/problemSets/PS04/my_answers")
getwd()
# Question 1
#initial setup
install.packages("car")
library(car)
data(Prestige) #prestige of Canadian occupations
help(Prestige)
occupations <- Prestige #change name for clarity
#part a professional = 1, else = 0
occupations$professional <- as.factor(ifelse(occupations$type == "prof", 1, 0))
#part b use * because continuous X dummy
parta_regression <- lm(occupations$prestige ~ occupations$income*occupations$professional)
summary(parta_regression)
#part c E[Y]= intercept+(income_coefficient×income)+(professional_coefficient×professional)+(interaction_coefficient×income×professional)
intercept <- round(parta_regression$coefficients[1],3)
income_coef <- round(parta_regression$coefficients[2],3)
professional_coef <- round(parta_regression$coefficients[3],3)
interaction_coef <- round(parta_regression$coefficients[4],3)
cat(intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", interaction_coef, "*income*professional")
#part d
#for every one-unit increase in income, a 0.003 increase in prestige score will occur for those who are not considered part of the professional category (professional = 0)
#part e
#there is a 37.781 increase in prestige score when there is a change from non-professional to professional occupation (professional changes from 0 --> 1), holding income constant.
#part f
intercept <- 21.142
income_coef <- 0.003
income <- 1000
prof_coef <- 37.781
professional <- 1
interaction_coef <- -0.002
partf_expected <- intercept + income_coef * income + prof_coef * professional + both_coef * income * professional
print(partf_expected)
# According to the predicted equation, if someone in a professional occupation (professional == 1) has an income increase of 1000 their prestige score is predicted to be 59.923
#part g
intercept <- 21.142
income_coef <- 0.003
income <- 6000
prof_coef <- 37.781
professional <- 1
notprofessional <- 0
interaction_coef <- -0.002
professional_partg <- intercept + income_coef * income + prof_coef * professional + both_coef * income * professional
notprofessional_partg <- intercept + income_coef * income + prof_coef * notprofessional + both_coef * income * notprofessional
cat(professional_partg, notprofessional_partg)
change_in_occupation <- professional_partg - notprofessional_partg
print(change_in_occupation)
# when a professional occupation has an income of 6000, their prestige score is 64.923 according to the predicted equation,
# while a non-professional occupation with an income of 6000 only has a 39.142 predicted prestige score.
# This means that if one is to change from non-professional to professional, holding income constant, there would be a predicted 25.781 increase in prestige score
install.packages("car")
library(car)
data(Prestige) #prestige of Canadian occupations
help(Prestige)
occupations <- Prestige #change name for clarity
#part a professional = 1, else = 0
occupations$professional <- as.factor(ifelse(occupations$type == "prof", 1, 0))
#part b use * because continuous X dummy
parta_regression <- lm(occupations$prestige ~ occupations$income*occupations$professional)
summary(parta_regression)
#part c E[Y]= intercept+(income_coefficient×income)+(professional_coefficient×professional)+(interaction_coefficient×income×professional)
intercept <- round(parta_regression$coefficients[1],3)
income_coef <- round(parta_regression$coefficients[2],3)
professional_coef <- round(parta_regression$coefficients[3],3)
interaction_coef <- round(parta_regression$coefficients[4],3)
cat(intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", interaction_coef, "*income*professional")
#part d
#for every one-unit increase in income, a 0.003 increase in prestige score will occur for those who are not considered part of the professional category (professional = 0)
#part e
#there is a 37.781 increase in prestige score when there is a change from non-professional to professional occupation (professional changes from 0 --> 1), holding income constant.
#part f
intercept <- 21.142
income_coef <- 0.003
income <- 1000
prof_coef <- 37.781
professional <- 1
interaction_coef <- -0.002
partf_expected <- intercept + income_coef * income + prof_coef * professional + both_coef * income * professional
print(partf_expected)
# According to the predicted equation, if someone in a professional occupation (professional == 1) has an income increase of 1000 their prestige score is predicted to be 59.923
#part g
intercept <- 21.142
income_coef <- 0.003
income <- 6000
prof_coef <- 37.781
professional <- 1
notprofessional <- 0
interaction_coef <- -0.002
professional_partg <- intercept + income_coef * income + prof_coef * professional + both_coef * income * professional
notprofessional_partg <- intercept + income_coef * income + prof_coef * notprofessional + both_coef * income * notprofessional
cat(professional_partg, notprofessional_partg)
change_in_occupation <- professional_partg - notprofessional_partg
print(change_in_occupation)
# when a professional occupation has an income of 6000, their prestige score is 64.923 according to the predicted equation,
# while a non-professional occupation with an income of 6000 only has a 39.142 predicted prestige score.
# This means that if one is to change from non-professional to professional, holding income constant, there would be a predicted 25.781 increase in prestige score
parta_regression <- lm(occupations$prestige ~ occupations$income*occupations$professional)
summary(parta_regression)
cat(intercept, "+", income_intercept, "* income", "+", professional_intercept, "* professional", "+", interaction_coef, "*income*professional")
print(partf_expected)
partf_expected <- intercept + income_coef * income + prof_coef * professional + both_coef * income * professional
partf_expected
notprofessional_partg
